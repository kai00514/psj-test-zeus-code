# 3Dセキュア認証フロー実装プロジェクト

## 技術スタック
- **フロントエンド**: Next.js (React)
- **バックエンド**: Next.js API Routes
- **決済システム**: Zeus決済システム
- **認証方式**: EMV 3-Dセキュア

## 主要ファイル
- `pages/credit-card.js`: カード情報入力と3Dセキュア認証フローの実装
- `pages/api/payment.js`: カード情報のトークン化と3Dセキュア認証の開始
- `pages/api/payment-result/callback.js`: 3Dセキュア認証結果の受け取り
- `pages/api/payment-result.js`: 最終決済処理の実行
- `pages/payment-result.js`: 決済結果の表示
- `docs/project-spec.md`: プロジェクト仕様書

## プロジェクト概要
クレジットカード決済システムに3Dセキュア認証を実装するプロジェクト。ユーザーがカード情報を入力後、必要に応じて3Dセキュア認証を行い、決済を完了するフローを構築しています。

## 現状の課題
1. **3Dセキュア認証画面の表示問題**:
   - 認証画面がiframe内に正しく表示されない
   - 認証完了後に白い画面が表示されたままになる

2. **認証後の遷移問題**:
   - 認証完了後、結果ページへの遷移が正しく行われない
   - コールバック処理が複雑で信頼性に欠ける

3. **データ連携の問題**:
   - 認証結果データ（MD, PaRes）が正しく受け渡されない
   - 親ウィンドウとiframe間の通信が不安定

## 実装目標
1. **仕様書に準拠した実装**:
   - PaReq/PaRes, AuthReq/AuthRes, PayReq/PayResの各フローを正確に実装
   - 必要なグローバル関数（setPareqParams, _onPaResSuccess）を適切に実装

2. **ユーザー体験の向上**:
   - 3Dセキュア認証画面をページ内に適切に表示
   - 認証完了後、スムーズに結果ページへ遷移

3. **エラーハンドリングの強化**:
   - 各ステップでの例外処理を適切に実装
   - フォールバックメカニズムの導入

## 制約条件
1. **Zeus決済システムの仕様**:
   - 指定されたAPIエンドポイントとパラメータ形式に従う必要がある
   - グローバル関数名や処理フローを変更できない

2. **セキュリティ要件**:
   - カード情報の安全な取り扱い
   - クロスオリジン通信の制限への対応

3. **ブラウザ互換性**:
   - iframe内でのJavaScript実行制限
   - postMessageやwindow.parentアクセスの制限